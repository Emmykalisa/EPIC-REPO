{"version":3,"sources":["User.js"],"names":["User","users","data","newUser","id","uuid","v4","email","firstName","lastName","push","find","reflect","user","findOne","index","indexOf","splice"],"mappings":";;;;;;;AAAA;;AACA;;;;;;;;;;IAEMA,I;;;AACJ;;;;AAIA,kBAAc;AAAA;;AACZ,SAAKC,KAAL,GAAa,EAAb;AACD;AACD;;;;;;;;2BAIOC,I,EAAM;AACX,UAAMC,OAAO,GAAG;AACdC,QAAAA,EAAE,EAAEC,cAAKC,EAAL,EADU;AAEdC,QAAAA,KAAK,EAAEL,IAAI,CAACK,KAAL,IAAc,EAFP;AAGdC,QAAAA,SAAS,EAAEN,IAAI,CAACM,SAAL,IAAkB,EAHf;AAIdC,QAAAA,QAAQ,EAAEP,IAAI,CAACO,QAAL,IAAiB;AAJb,OAAhB;AAMA,WAAKR,KAAL,CAAWS,IAAX,CAAgBP,OAAhB;AACA,aAAOA,OAAP;AACD;AACD;;;;;;;;4BAKQC,E,EAAI;AACV,aAAO,KAAKH,KAAL,CAAWU,IAAX,CAAgB,UAAAC,OAAO;AAAA,eAAIA,OAAO,CAACR,EAAR,KAAeA,EAAnB;AAAA,OAAvB,CAAP;AACD;AACD;;;;;;8BAGU;AACR,aAAO,KAAKH,KAAZ;AACD;AACD;;;;;;;;2BAKOG,E,EAAIF,I,EAAM;AACf,UAAMW,IAAI,GAAG,KAAKC,OAAL,CAAaV,EAAb,CAAb;AACA,UAAMW,KAAK,GAAG,KAAKd,KAAL,CAAWe,OAAX,CAAmBH,IAAnB,CAAd;AACA,WAAKZ,KAAL,CAAWc,KAAX,EAAkBR,KAAlB,GAA0BL,IAAI,CAAC,OAAD,CAAJ,IAAiBW,IAAI,CAACN,KAAhD;AACA,WAAKN,KAAL,CAAWc,KAAX,EAAkBP,SAAlB,GAA8BN,IAAI,CAAC,WAAD,CAAJ,IAAqBW,IAAI,CAACL,SAAxD;AACA,WAAKP,KAAL,CAAWc,KAAX,EAAkBN,QAAlB,GAA6BP,IAAI,CAAC,UAAD,CAAJ,IAAoBW,IAAI,CAACJ,QAAtD;AACA,aAAO,KAAKR,KAAL,CAAWc,KAAX,CAAP;AACD;AACD;;;;;;;4BAIOX,E,EAAI;AACT,UAAMS,IAAI,GAAG,KAAKC,OAAL,CAAaV,EAAb,CAAb;AACA,UAAMW,KAAK,GAAG,KAAKd,KAAL,CAAWe,OAAX,CAAmBH,IAAnB,CAAd;AACA,WAAKZ,KAAL,CAAWgB,MAAX,CAAkBF,KAAlB,EAAyB,CAAzB;AACA,aAAO,EAAP;AACD;;;;;;eAEY,IAAIf,IAAJ,E","sourceRoot":"/home/giraict/Project/andela/EPICmail/server/models","sourcesContent":["import moment from 'moment';\nimport uuid from 'uuid';\n\nclass User {\n  /**\n   * class constructor\n   * @param {object} data\n   */\n  constructor() {\n    this.users = [];\n  }\n  /**\n   * \n   * @returns {object} user object\n   */\n  create(data) {\n    const newUser = {\n      id: uuid.v4(),\n      email: data.email || '',\n      firstName: data.firstName || '',\n      lastName: data.lastName || ''\n    };\n    this.users.push(newUser);\n    return newUser\n  }\n  /**\n   * \n   * @param {uuid} id\n   * @returns {object} user object\n   */\n  findOne(id) {\n    return this.users.find(reflect => reflect.id === id);\n  }\n  /**\n   * @returns {object} returns all users\n   */\n  findAll() {\n    return this.users;\n  }\n  /**\n   * \n   * @param {uuid} id\n   * @param {object} data \n   */\n  update(id, data) {\n    const user = this.findOne(id);\n    const index = this.users.indexOf(user);\n    this.users[index].email = data['email'] || user.email;\n    this.users[index].firstName = data['firstName'] || user.firstName;\n    this.users[index].lastName = data['lastName'] || user.lastName\n    return this.users[index];\n  }\n  /**\n   * \n   * @param {uuid} id \n   */\n  delete(id) {\n    const user = this.findOne(id);\n    const index = this.users.indexOf(user);\n    this.users.splice(index, 1);\n    return {};\n  }\n}\nexport default new User();"]}