{"version":3,"sources":["Message.js"],"names":["Message","create","req","res","body","subject","message","parentMessageId","status","send","MessageModel","getAll","messages","findAll","getOne","findOne","params","id","getUnread","findMessages","getSent","delete","mes"],"mappings":";;;;;;AAAA;;;;;;AAEA,IAAMA,UAAU;AACd;;;;;;AAMAC,QAPc,kBAOPC,GAPO,EAOFC,GAPE,EAOG;AACf,QAAI,CAACD,IAAIE,IAAJ,CAASC,OAAV,IAAqB,CAACH,IAAIE,IAAJ,CAASE,OAA/B,IAA0C,CAACJ,IAAIE,IAAJ,CAASG,eAApD,IAAuE,CAACL,IAAIE,IAAJ,CAASI,MAArF,EAA6F;AAC3F,aAAOL,IAAIK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAC,WAAW,yBAAZ,EAArB,CAAP;AACD;AACD,QAAMH,UAAUI,kBAAaT,MAAb,CAAoBC,IAAIE,IAAxB,CAAhB;AACA,WAAOD,IAAIK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBH,OAArB,CAAP;AACD,GAba;;AAcd;;;;;;AAMAK,QApBc,kBAoBPT,GApBO,EAoBFC,GApBE,EAoBG;AACf,QAAMS,WAAWF,kBAAaG,OAAb,EAAjB;AACA,WAAOV,IAAIK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBG,QAArB,CAAP;AACD,GAvBa;;AAwBd;;;;;;AAMAE,QA9Bc,kBA8BPZ,GA9BO,EA8BFC,GA9BE,EA8BG;AACf,QAAMG,UAAUI,kBAAaK,OAAb,CAAqBb,IAAIc,MAAJ,CAAWC,EAAhC,CAAhB;AACA,QAAI,CAACX,OAAL,EAAc;AACZ,aAAOH,IAAIK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAC,WAAW,mBAAZ,EAArB,CAAP;AACD;AACD,WAAON,IAAIK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBH,OAArB,CAAP;AACD,GApCa;;AAqCd;;;;;;AAMAY,WA3Cc,qBA2CJhB,GA3CI,EA2CCC,GA3CD,EA2CM;AAClB,QAAMS,WAAWF,kBAAaS,YAAb,CAA0B,QAA1B,CAAjB;AACA,QAAI,CAACP,QAAL,EAAe;AACb,aAAOT,IAAIK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAC,WAAW,mBAAZ,EAArB,CAAP;AACD;AACD,WAAON,IAAIK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBG,QAArB,CAAP;AACD,GAjDa;;AAkDd;;;;;;AAMAQ,SAxDc,mBAwDNlB,GAxDM,EAwDDC,GAxDC,EAwDI;AAChB,QAAMS,WAAWF,kBAAaS,YAAb,CAA0B,MAA1B,CAAjB;AACA,QAAI,CAACP,QAAL,EAAe;AACb,aAAOT,IAAIK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAC,WAAW,mBAAZ,EAArB,CAAP;AACD;AACD,WAAON,IAAIK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBG,QAArB,CAAP;AACD,GA9Da;;AA+Dd;;;;;;AAMAS,QArEc,mBAqEPnB,GArEO,EAqEFC,GArEE,EAqEG;AACf,QAAMG,UAAUI,kBAAaK,OAAb,CAAqBb,IAAIc,MAAJ,CAAWC,EAAhC,CAAhB;AACA,QAAI,CAACX,OAAL,EAAc;AACZ,aAAOH,IAAIK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAC,WAAW,mBAAZ,EAArB,CAAP;AACD;AACD,QAAMa,MAAMZ,kBAAaW,MAAb,CAAoBnB,IAAIc,MAAJ,CAAWC,EAA/B,CAAZ;AACA,WAAOd,IAAIK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBa,GAArB,CAAP;AACD;AA5Ea,CAAhB;;kBA+EetB,O","file":"Message.js","sourceRoot":"/home/giraict/Project/andela/EPICmail/server/controllers","sourcesContent":["import MessageModel from '../models/Message';\n\nconst Message = {\n  /**\n   * \n   * @param {object} req \n   * @param {object} res\n   * @returns {object} message object \n   */\n  create(req, res) {\n    if (!req.body.subject && !req.body.message && !req.body.parentMessageId && !req.body.status) {\n      return res.status(400).send({'message': 'All fields are required'})\n    }\n    const message = MessageModel.create(req.body);\n    return res.status(200).send(message);\n  },\n  /**\n   * \n   * @param {object} req \n   * @param {object} res \n   * @returns {object} messages array\n   */\n  getAll(req, res) {\n    const messages = MessageModel.findAll();\n    return res.status(200).send(messages);\n  },\n  /**\n   * \n   * @param {object} req \n   * @param {object} res\n   * @returns {object} message object\n   */\n  getOne(req, res) {\n    const message = MessageModel.findOne(req.params.id);\n    if (!message) {\n      return res.status(400).send({'message': 'message not found'});\n    }\n    return res.status(200).send(message);\n  },\n  /**\n   * \n   * @param {object} req \n   * @param {object} res\n   * @returns {object} message object\n   */\n  getUnread(req, res) {\n    const messages = MessageModel.findMessages('Unread');\n    if (!messages) {\n      return res.status(400).send({'message': 'message not found'});\n    }\n    return res.status(200).send(messages);\n  },\n  /**\n   * \n   * @param {object} req \n   * @param {object} res\n   * @returns {object} message object\n   */\n  getSent(req, res) {\n    const messages = MessageModel.findMessages('Sent');\n    if (!messages) {\n      return res.status(400).send({'message': 'message not found'});\n    }\n    return res.status(200).send(messages);\n  },\n  /**\n   * \n   * @param {object} req \n   * @param {object} res \n   * @returns {void} return statuc code 204 \n   */\n  delete(req, res) {\n    const message = MessageModel.findOne(req.params.id);\n    if (!message) {\n      return res.status(400).send({'message': 'message not found'});\n    }\n    const mes = MessageModel.delete(req.params.id);\n    return res.status(200).send(mes);\n  }\n}\n\nexport default Message;\n"]}