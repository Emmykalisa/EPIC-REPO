{"version":3,"sources":["User.js"],"names":["User","create","req","res","body","email","firstName","lastName","status","send","user","UserModel","getAll","users","findAll","getOne","findOne","params","id","update","updatedUser","delete","us"],"mappings":";;;;;;;AAAA;;;;AAEA,IAAMA,IAAI,GAAG;AACX;;;;;;AAMAC,EAAAA,MAPW,kBAOJC,GAPI,EAOCC,GAPD,EAOM;AACf,QAAI,CAACD,GAAG,CAACE,IAAJ,CAASC,KAAV,IAAmB,CAACH,GAAG,CAACE,IAAJ,CAASE,SAA7B,IAA0C,CAACJ,GAAG,CAACE,IAAJ,CAASG,QAAxD,EAAkE;AAChE,aAAOJ,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAC,mBAAW;AAAZ,OAArB,CAAP;AACD;;AACD,QAAMC,IAAI,GAAGC,cAAUV,MAAV,CAAiBC,GAAG,CAACE,IAArB,CAAb;;AACA,WAAOD,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBC,IAArB,CAAP;AACD,GAbU;;AAcX;;;;;;AAMAE,EAAAA,MApBW,kBAoBJV,GApBI,EAoBCC,GApBD,EAoBM;AACf,QAAMU,KAAK,GAAGF,cAAUG,OAAV,EAAd;;AACA,WAAOX,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBI,KAArB,CAAP;AACD,GAvBU;;AAwBX;;;;;;AAMAE,EAAAA,MA9BW,kBA8BJb,GA9BI,EA8BCC,GA9BD,EA8BM;AACf,QAAMO,IAAI,GAAGC,cAAUK,OAAV,CAAkBd,GAAG,CAACe,MAAJ,CAAWC,EAA7B,CAAb;;AACA,QAAI,CAACR,IAAL,EAAW;AACT,aAAOP,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAC,mBAAW;AAAZ,OAArB,CAAP;AACD;;AACD,WAAON,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBC,IAArB,CAAP;AACD,GApCU;;AAqCX;;;;;;AAMAS,EAAAA,MA3CW,kBA2CJjB,GA3CI,EA2CCC,GA3CD,EA2CM;AACf,QAAMO,IAAI,GAAGC,cAAUK,OAAV,CAAkBd,GAAG,CAACe,MAAJ,CAAWC,EAA7B,CAAb;;AACA,QAAI,CAACR,IAAL,EAAW;AACT,aAAOP,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAC,mBAAW;AAAZ,OAArB,CAAP;AACD;;AACD,QAAMW,WAAW,GAAGT,cAAUQ,MAAV,CAAiBjB,GAAG,CAACe,MAAJ,CAAWC,EAA5B,EAAgChB,GAAG,CAACE,IAApC,CAApB;;AACA,WAAOD,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBW,WAArB,CAAP;AACD,GAlDU;;AAmDX;;;;;;AAMAC,EAAAA,MAzDW,mBAyDJnB,GAzDI,EAyDCC,GAzDD,EAyDM;AACf,QAAMO,IAAI,GAAGC,cAAUK,OAAV,CAAkBd,GAAG,CAACe,MAAJ,CAAWC,EAA7B,CAAb;;AACA,QAAI,CAACR,IAAL,EAAW;AACT,aAAOP,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAC,mBAAW;AAAZ,OAArB,CAAP;AACD;;AACD,QAAMa,EAAE,GAAGX,cAAUU,MAAV,CAAiBnB,GAAG,CAACe,MAAJ,CAAWC,EAA5B,CAAX;;AACA,WAAOf,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBa,EAArB,CAAP;AACD;AAhEU,CAAb;eAmEetB,I","sourceRoot":"/home/giraict/Project/andela/EPICmail/server/controllers","sourcesContent":["import UserModel from '../models/User';\n\nconst User = {\n  /**\n   * \n   * @param {object} req \n   * @param {object} res\n   * @returns {object} user object \n   */\n  create(req, res) {\n    if (!req.body.email && !req.body.firstName && !req.body.lastName) {\n      return res.status(400).send({'message': 'All fields are required'})\n    }\n    const user = UserModel.create(req.body);\n    return res.status(201).send(user);\n  },\n  /**\n   * \n   * @param {object} req \n   * @param {object} res \n   * @returns {object} users array\n   */\n  getAll(req, res) {\n    const users = UserModel.findAll();\n    return res.status(200).send(users);\n  },\n  /**\n   * \n   * @param {object} req \n   * @param {object} res\n   * @returns {object} user object\n   */\n  getOne(req, res) {\n    const user = UserModel.findOne(req.params.id);\n    if (!user) {\n      return res.status(404).send({'message': 'user not found'});\n    }\n    return res.status(200).send(user);\n  },\n  /**\n   * \n   * @param {object} req \n   * @param {object} res \n   * @returns {object} updated user\n   */\n  update(req, res) {\n    const user = UserModel.findOne(req.params.id);\n    if (!user) {\n      return res.status(404).send({'message': 'user not found'});\n    }\n    const updatedUser = UserModel.update(req.params.id, req.body)\n    return res.status(200).send(updatedUser);\n  },\n  /**\n   * \n   * @param {object} req \n   * @param {object} res \n   * @returns {void} return statuc code 204 \n   */\n  delete(req, res) {\n    const user = UserModel.findOne(req.params.id);\n    if (!user) {\n      return res.status(404).send({'message': 'user not found'});\n    }\n    const us = UserModel.delete(req.params.id);\n    return res.status(204).send(us);\n  }\n}\n\nexport default User;"]}