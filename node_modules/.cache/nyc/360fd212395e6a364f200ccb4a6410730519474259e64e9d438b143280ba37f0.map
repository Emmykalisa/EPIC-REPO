{"version":3,"sources":["Message.js"],"names":["Message","create","req","res","message","MessageModel","body","status","send","getAll","messages","findAll","getOne","findOne","params","id","getUnread","findMessages","getSent","delete","mes"],"mappings":";;;;;;;AAAA;;;;AAEA,IAAMA,OAAO,GAAG;AACd;;;;;;AAMAC,EAAAA,MAPc,kBAOPC,GAPO,EAOFC,GAPE,EAOG;AACf;AAEA;AACA;AACA,QAAMC,OAAO,GAAGC,iBAAaJ,MAAb,CAAoBC,GAAG,CAACI,IAAxB,CAAhB;;AACA,WAAOH,GAAG,CAACI,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBJ,OAArB,CAAP;AACD,GAda;;AAed;;;;;;AAMAK,EAAAA,MArBc,kBAqBPP,GArBO,EAqBFC,GArBE,EAqBG;AACf,QAAMO,QAAQ,GAAGL,iBAAaM,OAAb,EAAjB;;AACA,WAAOR,GAAG,CAACI,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBE,QAArB,CAAP;AACD,GAxBa;;AAyBd;;;;;;AAMAE,EAAAA,MA/Bc,kBA+BPV,GA/BO,EA+BFC,GA/BE,EA+BG;AACf,QAAMC,OAAO,GAAGC,iBAAaQ,OAAb,CAAqBX,GAAG,CAACY,MAAJ,CAAWC,EAAhC,CAAhB;;AACA,QAAI,CAACX,OAAL,EAAc;AACZ,aAAOD,GAAG,CAACI,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAC,mBAAW;AAAZ,OAArB,CAAP;AACD;;AACD,WAAOL,GAAG,CAACI,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBJ,OAArB,CAAP;AACD,GArCa;;AAsCd;;;;;;AAMAY,EAAAA,SA5Cc,qBA4CJd,GA5CI,EA4CCC,GA5CD,EA4CM;AAClB,QAAMO,QAAQ,GAAGL,iBAAaY,YAAb,CAA0B,QAA1B,CAAjB;;AACA,QAAI,CAACP,QAAL,EAAe;AACb,aAAOP,GAAG,CAACI,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAC,mBAAW;AAAZ,OAArB,CAAP;AACD;;AACD,WAAOL,GAAG,CAACI,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBE,QAArB,CAAP;AACD,GAlDa;;AAmDd;;;;;;AAMAQ,EAAAA,OAzDc,mBAyDNhB,GAzDM,EAyDDC,GAzDC,EAyDI;AAChB,QAAMO,QAAQ,GAAGL,iBAAaY,YAAb,CAA0B,MAA1B,CAAjB;;AACA,QAAI,CAACP,QAAL,EAAe;AACb,aAAOP,GAAG,CAACI,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAC,mBAAW;AAAZ,OAArB,CAAP;AACD;;AACD,WAAOL,GAAG,CAACI,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBE,QAArB,CAAP;AACD,GA/Da;;AAgEd;;;;;;AAMAS,EAAAA,MAtEc,mBAsEPjB,GAtEO,EAsEFC,GAtEE,EAsEG;AACf,QAAMC,OAAO,GAAGC,iBAAaQ,OAAb,CAAqBX,GAAG,CAACY,MAAJ,CAAWC,EAAhC,CAAhB;;AACA,QAAI,CAACX,OAAL,EAAc;AACZ,aAAOD,GAAG,CAACI,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAC,mBAAW;AAAZ,OAArB,CAAP;AACD;;AACD,QAAMY,GAAG,GAAGf,iBAAac,MAAb,CAAoBjB,GAAG,CAACY,MAAJ,CAAWC,EAA/B,CAAZ;;AACA,WAAOZ,GAAG,CAACI,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBY,GAArB,CAAP;AACD;AA7Ea,CAAhB;eAgFepB,O","sourceRoot":"/home/giraict/Project/andela/EPICmail/server/controllers","sourcesContent":["import MessageModel from '../models/Message';\n\nconst Message = {\n  /**\n   * \n   * @param {object} req \n   * @param {object} res\n   * @returns {object} message object \n   */\n  create(req, res) {\n    // if (!req.body.subject && !req.body.message && !req.body.parentMessageId && !req.body.status) {\n     \n    //   return res.status(400).send({'message': 'All fields are required'})\n    // }\n    const message = MessageModel.create(req.body);\n    return res.status(201).send(message);\n  },\n  /**\n   * \n   * @param {object} req \n   * @param {object} res \n   * @returns {object} messages array\n   */\n  getAll(req, res) {\n    const messages = MessageModel.findAll();\n    return res.status(200).send(messages);\n  },\n  /**\n   * \n   * @param {object} req \n   * @param {object} res\n   * @returns {object} message object\n   */\n  getOne(req, res) {\n    const message = MessageModel.findOne(req.params.id);\n    if (!message) {\n      return res.status(400).send({'message': 'message not found'});\n    }\n    return res.status(200).send(message);\n  },\n  /**\n   * \n   * @param {object} req \n   * @param {object} res\n   * @returns {object} message object\n   */\n  getUnread(req, res) {\n    const messages = MessageModel.findMessages('Unread');\n    if (!messages) {\n      return res.status(400).send({'message': 'message not found'});\n    }\n    return res.status(200).send(messages);\n  },\n  /**\n   * \n   * @param {object} req \n   * @param {object} res\n   * @returns {object} message object\n   */\n  getSent(req, res) {\n    const messages = MessageModel.findMessages('Sent');\n    if (!messages) {\n      return res.status(400).send({'message': 'message not found'});\n    }\n    return res.status(200).send(messages);\n  },\n  /**\n   * \n   * @param {object} req \n   * @param {object} res \n   * @returns {void} return statuc code 204 \n   */\n  delete(req, res) {\n    const message = MessageModel.findOne(req.params.id);\n    if (!message) {\n      return res.status(404).send({'message': 'message not found'});\n    }\n    const mes = MessageModel.delete(req.params.id);\n    return res.status(200).send(mes);\n  }\n}\n\nexport default Message;\n"]}